@{
ViewData["Title"] = "Home Page";
}


@inject UserManager<User> UserManager
@using Microsoft.AspNetCore.Identity
@using TestMVC.Models.Entity
@model TestMVC.Models.Entity.User

<script>
    function changeQuantity(itemId, increase) {
        fetch(`/UserItem/ChangeQuantity?itemId=${itemId}&increase=${increase}`, {method: 'POST'})
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
                return response.json();
            });
    }

    function deleteItem(itemId) {
        fetch(`/UserItem/${itemId}`, {method: 'DELETE'})
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
                return response.json();
            });
    }
</script>


@await Html.PartialAsync("_ErrorPopup")
<div class="flex-container">
    <div class="user-info">
        <img src="@($"favicon.png")" alt="default profile picture"
             style="width: 400px; height: auto; border: solid; color: white"/>
        <h1>@Model.Name</h1>
    </div>
    @if (!await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User) ?? new User(), "BasicUser"))
    {
    <div class="user-items">
        <table class="table">
            <h1 style="color:white;">Collection</h1>
            <thead>
            <tr>
                <th> Name</th>
                <th> Category</th>
                <th> Price</th>
                <th> Quantity</th>
                <th> Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model.UserItems)
            {
            <tr>
                <td> @item.Item!.ItemName </td>
                <td> @item.Item.Category </td>
                <td> @item.Price </td>
                <td> @item.Quantity </td>
                <td>
                    <div class="flex-row">
                        <button class="btn btn-primary btn-sm" onclick="changeQuantity('@item.ItemId', true)">
                            +
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="changeQuantity('@item.ItemId', false)">
                            -
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteItem('@item.ItemId')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
            }
            </tbody>
        </table>
        <button type="button" class="btn sell-button" data-toggle="modal" data-target="#exampleModal">
            Sell Items
        </button>
    </div>
    }
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Sell Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body justify-content-center">
                @await Html.PartialAsync("_SellItem")
            </div>
        </div>
    </div>
</div>

<style>
    .flex-container {
        display: flex;
        padding: 30px;
    }

    .user-info {
        flex: 1;
        justify-content: center;
        text-align: center;
    }

    .user-items {
        flex: 2;
    }

    table {
        background: white;
        opacity: 65%;
        border: solid 3px white;
    }

    .btn-sm {
        padding: 3px 6px;
        font-size: 10px;
    }

    .btn-danger {
        background-color: red;
        color: white;
    }

    .user-info h1 {
        color: white;
    }

    .sell-button {
        background: white;
    }

    .sell-button:hover {
        background: grey;
    }
</style>