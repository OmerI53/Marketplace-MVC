@inject UserManager<User> UserManager
@using Microsoft.AspNetCore.Identity
@using TestMVC.Models.Entity
@model TestMVC.Models.Entity.User

<script>
    function openEditModal(itemId, sellerId) {
        fetch(`/UserItem/Edit?itemId=${itemId}&sellerId=${sellerId}`)
            .then(response => response.text())
            .then(data => {
                document.getElementById('editBody').innerHTML = data;
                $('#EditItemModal').modal('show');
            });
    }
</script>

@{
var userId = UserManager.GetUserId(User);
var userEntity = await UserManager.FindByIdAsync(userId!);
if (userEntity == null)
{
TempData["ErrorMessage"] = "User not found";
return;
}

var role = UserManager.GetRolesAsync(userEntity).Result.FirstOrDefault();
}


@await Html.PartialAsync("_ErrorPopup")
<div class="flex-container">
    <div class="user-info">
        <img src="@($"/images/user/{role}.jpg")" alt="default profile picture"
             style="width: 400px; height: auto; border: solid; color: white"/>
        <h1>@Model.Name</h1>
        @if (!string.Equals(role, "BasicUser", StringComparison.OrdinalIgnoreCase))
        {
        <button type="button" class="btn profile-btn" data-toggle="modal" data-target="#SellItemModal">
            Sell Items
        </button>
        }
    </div>

    <div class="user-items">
        @if (!string.Equals(role, "BasicUser", StringComparison.OrdinalIgnoreCase))
        {
        <table class="table">
            <h1 style="color:white;">Collection</h1>
            <thead>
            <tr>
                <th> Name</th>
                <th> Category</th>
                <th> Price</th>
                <th> Quantity</th>
                <th> Edit</th>
            </tr>
            </thead>
        </table>
        <div class="item-table">
            <table class="table">
                <tbody>
                @foreach (var item in Model.UserItems)
                {
                <tr>
                    <td> @item.Item!.ItemName </td>
                    <td> @item.Item.Category </td>
                    <td> @item.Price </td>
                    <td> @item.Quantity </td>
                    <td>
                        <button class="btn profile-btn" onclick="openEditModal('@item.ItemId','@item.SellerId')">
                            <i class="fas fa-edit"></i>
                        </button>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
        }
        <br/>
        @await Html.PartialAsync("_PurchaseHistory", Model.Purchases)
    </div>
</div>

<div class="modal fade" id="SellItemModal" tabindex="-1" role="dialog" aria-labelledby="SellItemModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="SellItemModalLabel">Sell Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body justify-content-center">
                @await Html.PartialAsync("_SellItem")
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="EditItemModal" tabindex="-1" role="dialog" aria-labelledby="EditItemModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="EditItemModalLabel">Edit Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body justify-content-center" id="editBody">
                <!-- Partial view will be injected here -->
            </div>
        </div>
    </div>
</div>

<style>
    .flex-container {
        display: flex;
        padding: 30px;
    }

    .user-info {
        flex: 1;
        justify-content: center;
        text-align: center;
    }

    .user-items {
        flex: 2;
    }

    table {
        background: white;
        opacity: 65%;
        border: solid 3px white;
    }

    .item-table {
        max-height: 300px;
        min-height: 300px;
        overflow-y: auto;
        width: 100%;
        height: 100%;
    }

    .table {
        margin: 0;
        padding: 0;
        border-collapse: collapse; 
        table-layout: fixed; 
    }

    .btn-sm {
        padding: 3px 6px;
        font-size: 10px;
    }

    .btn-danger {
        background-color: red;
        color: white;
    }

    .user-info h1 {
        color: white;
    }

    .profile-btn {
        background: white;
    }

    .profile-btn:hover {
        background: grey;
    }
</style>